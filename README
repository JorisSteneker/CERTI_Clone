Mirror van de CERTI_Clone op https://github.com/JorisSteneker/CERTI_Clone. 
Deze versie heeft wel één extra commit waarin het compileren op Mac OS gerepareerd is op basis 
van de bugs gerapporteerd op de bugtracker van de officiële CERTI op https://savannah.nongnu.org/bugs/?group=certi.

License
-------

See COPYING file for use/modification/distribution conditions.
The main license (GPL) can be found in the file "gpl.txt". The license
for libraries librti and libcerti (LGPL) can be found in the file
"lesser.txt".

Installation
------------

The CERTI build system is using CMake 
(http://www.cmake.org/HTML/RunningCMake.html) such that
you need to have a working CMake on your system in order to build CERTI.

Depending on the target platform (Windows, Linux, Solaris...) and
the compiler (GCC, Visual Studio, MinGW, ...) the CERTI CMake build
system should discover and require the needed dependency.

The fast (and hopefully easy) way to build CERTI is:

1) Get the CERTI tarball or zip from 
   http://download.savannah.nongnu.org/releases/certi/
   
2) Unzip/Untar the archive
   This will create CERTI-X.Y.Z-Source/ directory
    
   on Unix this would be
   tar zxvf CERTI-X.Y.Z.tar.gz

3) Create a build directory
   Build_CERTI-X.Y.Z/
   mkdir Build_CERTI-X.Y.Z
   
4) Go to the build directory and launch CMake
   cd Build_CERTI-X.Y.Z
   cmake </path/to>/CERTI-X.Y.Z-Source
   
   may be
   cmake ../CERTI-X.Y.Z-Source
   
   one may choose the installation prefix with
   cmake -DCMAKE_INSTALL_PREFIX=/path/to/install ../CERTI-X.Y.Z-Source
   
   or launch an interactive CMake UI in order to modify CMAKE_INSTALL_PREFIX.
   cmake-gui ../CERTI-X.Y.Z-Source 
   or
   ccmake ../CERTI-X.Y.Z-Source
   
5) Build 
   make
   
6) Install 
   make install

The command used for building and installing CERTI depends
on the platform/compiler combination you chose. The previous
examples are for Unix-like system with make.
You may look at
   http://www.nongnu.org/certi/certi_doc/Install/html/index.html
   for other build examples.
   or generic CMake usage:
   http://www.cmake.org/cmake/help/runningcmake.html

Docker
------
A Dockerfile has been added to the project in order to automate the building.

1) Build: This creates a Docker image tagged as certi/certi.
   docker build --tag certi/certi .

2) Create container
   docker create --name certi certi/certi

3) Get the packaged artifacts
   docker cp certi:/certi/build/CERTI-3.5.1-Linux-Ubuntu_16.04-x86_64.deb .
   docker cp certi:/certi/build/CERTI-3.5.1-Linux-Ubuntu_16.04-x86_64.rpm .
   docker cp certi:/certi/build/CERTI-3.5.1-Linux-Ubuntu_16.04-x86_64.tar.gz .

The image has been prepared to actually run the binaries created by the build, however this has NOT been tested.

1) Build: This creates a Docker image tagged as certi/certi. In the /certi/build folder
   docker build --tag certi/certi .

2) Run
   docker run --name certi certi/certi rtig

Please note that the image does not expose any ports. These should be added to the Dockerfile and the run command.
See:
  - https://docs.docker.com/engine/reference/builder/#expose
  - https://docs.docker.com/engine/reference/commandline/run/#publish-or-expose-port--p-expose 

